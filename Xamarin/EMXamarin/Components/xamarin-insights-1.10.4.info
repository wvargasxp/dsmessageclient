{"Name":"Xamarin.Insights","Id":1915,"Alias":"xamarin-insights","Description":"# Xamarin Insights\r\nAdding Intelligent Analytics and Crash Reporting to your Xamarin Applications.\r\n\r\nXamarin Insights is a technology designed and developed to bring native analytics and crash reporting to your .NET mobile and desktop applications. ","Version":"1.10.4","Summary":"Insights for your Apps","QuickStart":"# Getting Started with Xamarin.Insights\r\n\r\n## Referencing Xamarin.Insights components in your solution\r\n\r\nIf you had acquired Xamarin.Insights components through the Xamarin component store interface from within your IDE, then after adding the components to your Xamarin.iOS, Xamarin.Android and Windows Phone projects through the Component manager, you will still need to manually reference the PCL (Portable Class Library) assemblies in the Xamarin.Forms PCL project in your solution. You can do this by manually adding the relevant PCL assembly references to your PCL project contained in the following path inside of your solution folder\r\n\r\nComponents/xamarin-insights-version/lib/pcl/\r\n\r\n\r\n## API\r\n\r\n### Initialize \r\n\r\n```\r\nusing Xamarin;\r\nInsights.Initialize(\"Your API key\");\r\n```\r\n\r\nIf you are using Android\r\n\r\n```\r\nusing Xamarin;\r\nInsights.Initialize(\"Your API key\", yourAppContext);\r\n```\r\n\r\nthe Initialize call should happen as soon as possible, ideally at app start-up.\r\n\r\n### Reporting\r\n\r\n```\r\nusing Xamarin;\r\nInsights.Report(exception);\r\n```\r\n\r\nThis API should be used to report exceptions that you have caught in a try{}catch{} statement that you feel is worth sending to Insights. \r\nIn addition you can add extra data to exceptions which will be reported back to Insights\r\n\r\n```\r\nusing Xamarin;\r\nInsights.Report(exception, new Dictionary\u003cstring, string\u003e { \r\n\t{\"Some additional info\", \"foobar\"}\r\n});\r\n```\r\n\r\nIf you just wish to add additional information to an exception but still throw the exception, you can use the Exception.Data property.\r\n\r\n```\r\ntry {\r\n\tExceptionThrowingFunction();\r\n} \r\ncatch (Exception exception) {\r\n\texception.Data[\"This is some extra data\"] = \"A cat\u0027s field of vision is about 200 degrees.\"\r\n\tthrow exception;\r\n}\r\n```\r\n\r\n### Identify\r\n\r\nIdentify is used to identify information about your users\r\n\r\n```\r\nusing Xamarin;\r\nInsights.Identify(\"YourUsersUniqueId\", \"Email\", \"njpatel@catfacts.com\");\r\nvar manyInfos = new Dictionary\u003cstring, string\u003e {\r\n\t{\"Email\", \"njpatel@catfacts.com\"},\r\n\t{\"CatTeethFact\", \"Cats have 30 teeth (12 incisors, 10 premolars, 4 canines, and 4 molars), while dogs have 42. Kittens have baby teeth, which are replaced by permanent teeth around the age of 7 months.\"}\r\n}\r\nInsights.Identify(\"YourUsersUniqueId\", manyInfos);\r\n```\r\n\r\n### Track\r\nTrack is used to track the various comings and goings of your app, you can track whatever you like. Track comes in two variations, first of all the event style track.\r\n\r\n```\r\nusing Xamarin;\r\nInsights.Track(\"MusicTrackPlayed\", new Dictionary\u003cstring, string\u003e { \r\n\t{\"TrackID\", \"E1D8AB93\"}, \r\n\t{\"Length\", \"183\"} \r\n});\r\n```\r\n\r\nYou can also use Track to track timed events, for example\r\n\r\n```\r\nusing Xamarin;\r\nusing (var handle = Insights.TrackTime(\"TimeToLogin\")) {\r\n\tawait SubmitLoginInformation(\"myuserid\", \"mypassword\");\r\n\t// ... more code goes here ...\r\n}\r\n\r\n// or if you do not wish to use the using syntax\r\nvar handle = Insights.TrackTime(\"TimeToLogin\");\r\nhandle.Start();\r\nawait SubmitLoginInformation(\"myuserid\", \"mypassword\");\r\n// ... more code goes here ...\r\nhandle.Stop();\r\n```","Hash":"2700ea3b41f27756ac3098c487e075c0","TargetPlatforms":["ios","android"],"TrialHash":null}